// Generated by gencpp from file evologics_ros_sync/EvologicsChannelDiagnostics.msg
// DO NOT EDIT!


#ifndef EVOLOGICS_ROS_SYNC_MESSAGE_EVOLOGICSCHANNELDIAGNOSTICS_H
#define EVOLOGICS_ROS_SYNC_MESSAGE_EVOLOGICSCHANNELDIAGNOSTICS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace evologics_ros_sync
{
template <class ContainerAllocator>
struct EvologicsChannelDiagnostics_
{
  typedef EvologicsChannelDiagnostics_<ContainerAllocator> Type;

  EvologicsChannelDiagnostics_()
    : header()
    , msg_type()
    , src_address(0)
    , dst_address(0)
    , duration(0)
    , rssi(0.0)
    , integrity(0.0)  {
    }
  EvologicsChannelDiagnostics_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , msg_type(_alloc)
    , src_address(0)
    , dst_address(0)
    , duration(0)
    , rssi(0.0)
    , integrity(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _msg_type_type;
  _msg_type_type msg_type;

   typedef uint8_t _src_address_type;
  _src_address_type src_address;

   typedef uint8_t _dst_address_type;
  _dst_address_type dst_address;

   typedef uint32_t _duration_type;
  _duration_type duration;

   typedef float _rssi_type;
  _rssi_type rssi;

   typedef float _integrity_type;
  _integrity_type integrity;




  typedef boost::shared_ptr< ::evologics_ros_sync::EvologicsChannelDiagnostics_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::evologics_ros_sync::EvologicsChannelDiagnostics_<ContainerAllocator> const> ConstPtr;

}; // struct EvologicsChannelDiagnostics_

typedef ::evologics_ros_sync::EvologicsChannelDiagnostics_<std::allocator<void> > EvologicsChannelDiagnostics;

typedef boost::shared_ptr< ::evologics_ros_sync::EvologicsChannelDiagnostics > EvologicsChannelDiagnosticsPtr;
typedef boost::shared_ptr< ::evologics_ros_sync::EvologicsChannelDiagnostics const> EvologicsChannelDiagnosticsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::evologics_ros_sync::EvologicsChannelDiagnostics_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::evologics_ros_sync::EvologicsChannelDiagnostics_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace evologics_ros_sync

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'evologics_ros_sync': ['/home/antoni/robot_ws/src/evologics_ros_sync/msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'auv_msgs': ['/home/antoni/workspace/catkin_ws/src/turbot_stack/auv_msgs/msg', '/home/antoni/workspace/catkin_ws/devel/share/auv_msgs/msg'], 'diagnostic_msgs': ['/opt/ros/kinetic/share/diagnostic_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::evologics_ros_sync::EvologicsChannelDiagnostics_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::evologics_ros_sync::EvologicsChannelDiagnostics_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::evologics_ros_sync::EvologicsChannelDiagnostics_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::evologics_ros_sync::EvologicsChannelDiagnostics_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::evologics_ros_sync::EvologicsChannelDiagnostics_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::evologics_ros_sync::EvologicsChannelDiagnostics_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::evologics_ros_sync::EvologicsChannelDiagnostics_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b32b57103b63318f51979306a6724452";
  }

  static const char* value(const ::evologics_ros_sync::EvologicsChannelDiagnostics_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb32b57103b63318fULL;
  static const uint64_t static_value2 = 0x51979306a6724452ULL;
};

template<class ContainerAllocator>
struct DataType< ::evologics_ros_sync::EvologicsChannelDiagnostics_<ContainerAllocator> >
{
  static const char* value()
  {
    return "evologics_ros_sync/EvologicsChannelDiagnostics";
  }

  static const char* value(const ::evologics_ros_sync::EvologicsChannelDiagnostics_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::evologics_ros_sync::EvologicsChannelDiagnostics_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# message containing USBL data published by modem driver\n\
\n\
Header header                           # message header which contains current timestamp\n\
\n\
string msg_type							# recvim, recvpbm or usbllong\n\
uint8 src_address                    	# source address\n\
uint8 dst_address						# destination address\n\
uint32 duration                         # Duration of the transmission, in microseconds\n\
float32 rssi                        	# Received Signal Strength Indicator (admisible if values lie in between -20dB and -85dB)\n\
float32 integrity                       # Signal integrity level (weak if below 100)\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::evologics_ros_sync::EvologicsChannelDiagnostics_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::evologics_ros_sync::EvologicsChannelDiagnostics_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.msg_type);
      stream.next(m.src_address);
      stream.next(m.dst_address);
      stream.next(m.duration);
      stream.next(m.rssi);
      stream.next(m.integrity);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct EvologicsChannelDiagnostics_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::evologics_ros_sync::EvologicsChannelDiagnostics_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::evologics_ros_sync::EvologicsChannelDiagnostics_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "msg_type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.msg_type);
    s << indent << "src_address: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.src_address);
    s << indent << "dst_address: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.dst_address);
    s << indent << "duration: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.duration);
    s << indent << "rssi: ";
    Printer<float>::stream(s, indent + "  ", v.rssi);
    s << indent << "integrity: ";
    Printer<float>::stream(s, indent + "  ", v.integrity);
  }
};

} // namespace message_operations
} // namespace ros

#endif // EVOLOGICS_ROS_SYNC_MESSAGE_EVOLOGICSCHANNELDIAGNOSTICS_H
