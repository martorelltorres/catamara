# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from evologics_ros_sync/EvologicsUsbllong.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class EvologicsUsbllong(genpy.Message):
  _md5sum = "926a7508803471db6934cecbabe54e0e"
  _type = "evologics_ros_sync/EvologicsUsbllong"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """# message containing USBL data published by modem driver

Header header                           # message header which contains current timestamp

uint8 remote_address					# The target's address

float32 X                               # X coordinate of the target in the local device's reference frame in metres
float32 Y                               # Y coordinate of the target in the local device's reference frame in metres
float32 Z                               # Z coordinate of the target in the local device's reference frame in metres

float32 N                               # N coordinate of the target in the local device's reference frame in metres
float32 E                               # E coordinate of the target in the local device's reference frame in metres
float32 D                               # D coordinate of the target in the local device's reference frame in metres

float32 roll                            # rotation angles of the local device, in radians, floating point
float32 pitch
float32 yaw

float32 rssi                        	# Received Signal Strength Indicator (admisible if values lie in between -20dB and -85dB)
float32 integrity                       # Signal integrity level (weak if below 100)
float32 accuracy 						# Accuracy of the position fix, in radians.
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id
"""
  __slots__ = ['header','remote_address','X','Y','Z','N','E','D','roll','pitch','yaw','rssi','integrity','accuracy']
  _slot_types = ['std_msgs/Header','uint8','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,remote_address,X,Y,Z,N,E,D,roll,pitch,yaw,rssi,integrity,accuracy

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(EvologicsUsbllong, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.remote_address is None:
        self.remote_address = 0
      if self.X is None:
        self.X = 0.
      if self.Y is None:
        self.Y = 0.
      if self.Z is None:
        self.Z = 0.
      if self.N is None:
        self.N = 0.
      if self.E is None:
        self.E = 0.
      if self.D is None:
        self.D = 0.
      if self.roll is None:
        self.roll = 0.
      if self.pitch is None:
        self.pitch = 0.
      if self.yaw is None:
        self.yaw = 0.
      if self.rssi is None:
        self.rssi = 0.
      if self.integrity is None:
        self.integrity = 0.
      if self.accuracy is None:
        self.accuracy = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.remote_address = 0
      self.X = 0.
      self.Y = 0.
      self.Z = 0.
      self.N = 0.
      self.E = 0.
      self.D = 0.
      self.roll = 0.
      self.pitch = 0.
      self.yaw = 0.
      self.rssi = 0.
      self.integrity = 0.
      self.accuracy = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_B12f().pack(_x.remote_address, _x.X, _x.Y, _x.Z, _x.N, _x.E, _x.D, _x.roll, _x.pitch, _x.yaw, _x.rssi, _x.integrity, _x.accuracy))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 49
      (_x.remote_address, _x.X, _x.Y, _x.Z, _x.N, _x.E, _x.D, _x.roll, _x.pitch, _x.yaw, _x.rssi, _x.integrity, _x.accuracy,) = _get_struct_B12f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_B12f().pack(_x.remote_address, _x.X, _x.Y, _x.Z, _x.N, _x.E, _x.D, _x.roll, _x.pitch, _x.yaw, _x.rssi, _x.integrity, _x.accuracy))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 49
      (_x.remote_address, _x.X, _x.Y, _x.Z, _x.N, _x.E, _x.D, _x.roll, _x.pitch, _x.yaw, _x.rssi, _x.integrity, _x.accuracy,) = _get_struct_B12f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_B12f = None
def _get_struct_B12f():
    global _struct_B12f
    if _struct_B12f is None:
        _struct_B12f = struct.Struct("<B12f")
    return _struct_B12f
